<div class="musics_show_container">
  <h2><%= @music.title %></h2>
  <h2></h2>
  <canvas id="cv0" width="600" height="1800"></canvas>
  <canvas id="cv1" width="600" height="1800"></canvas>
</div>
<script>
  (function() {
    let max_section = 5;
    let resolution = 192;
    function Note(lane, section, index, pulse){
      this.lane = lane;
      this.section = section;
      this.index = index;
      this.pulse = pulse;
    }
    let extralarge_section = 0;
    let notes = [];
    function ChannelToLane(channel){
      return (Math.floor(channel / 10) - 1) * 6 + (channel % 10) - 1;
    }
    let lines = gon.score_str.split("\n");
    for(let line of lines){
      if(7 < line.length && line[0] == "#" && line[6] == ":"){
        if(line[line.length - 1] == "\r"){
          line = line.substr(0, line.length - 1);
        }
        //console.log(line);
        let section = Number(line.substr(1, 3));
        let channel = Number(line.substr(4, 2));
        let lane = ChannelToLane(channel);
        let objstr = line.substr(7);
        for(let i = 0; i < objstr.length; i += 2){
          let index = Number(objstr.substr(i, 2));
          if(index != 0){
            let pulse = resolution * (section + i / objstr.length);
            notes.push(new Note(lane, section, index, pulse));
            if(index == 36){
              extralarge_section = section + 1;
              console.log("extralarge_section: " + extralarge_section.toString());
            }
          }
        }
      }
    }
    notes.sort(
      function(a, b){
        if(a.pulse < b.pulse) return -1;
        if(a.pulse > b.pulse) return 1;
        return 0;
      }
    );
    max_section = notes[notes.length - 1].section + 1;

    // Canvas APIが利用できるかを判定（1）
    if (HTMLCanvasElement) {
      console.log("描画開始");
      // コンテキストオブジェクトを取得（2）
      let cv = [document.querySelector('#cv0'), document.querySelector('#cv1')];
      let context = [cv[0].getContext('2d'), cv[1].getContext('2d')];
      let arrow_r = 7;
      let small_r = 13;
      let large_r = 18;
      let extralarge_r = 30;

      let sqrt2 = Math.sqrt(2);

      let div_x = 45;
      let div_y = 45;
      let section_num_w = 70;

      cv[1].height = div_y * 8 * extralarge_section;
      cv[0].height = div_y * 8 * (max_section - extralarge_section);

      function getContextY(pulse){
        section_f = pulse / resolution;
        if(section_f < extralarge_section){
          return {
            c: context[1],
            y: div_y * 8 * (extralarge_section - pulse / resolution)
          };
        }
        else{
          return {
            c: context[0],
            y: div_y * 8 * (max_section - pulse / resolution)
          };
        }
      }

      let box_x = 50;
      for(let i = 0; i < 2; ++i){
        context[i].strokeStyle = 'rgb(30, 30, 30)';
      }
      for(let section = 0; section < max_section; ++section){
        let context_y = getContextY(section * resolution);
        let c = context_y.c;
        let box_y = context_y.y - div_y * 8;

        c.strokeRect(box_x, box_y, div_x * 7 + section_num_w, div_y * 8);
        c.beginPath();
        c.moveTo(box_x + div_x * 7, box_y);
        c.lineTo(box_x + div_x * 7, box_y + div_y * 8);
        c.stroke();
        c.fillText(section.toString(), box_x + div_x * 7 + 20, box_y + div_y * 4);
        for(let i = 1; i < 7; ++i){
          c.beginPath();
          c.moveTo(box_x + div_x * i, box_y);
          c.lineTo(box_x + div_x * i, box_y + div_y * 8);
          c.stroke();
        }
        for(let i = 1; i < 8; ++i){
          c.beginPath();
          c.moveTo(box_x, box_y + div_y * i);
          c.lineTo(box_x + div_x * 7, box_y + div_y * i);
          c.stroke();
        }
      }
      let last_note = [null, null];
      for(let i = 0; i < 2; ++i){
        context[i].lineWidth = 18;
        context[i].strokeStyle = context[i].fillStyle = 'rgb(240, 120, 120)';
      }
      for(let note of notes){
        // handle slide notes
        let slide_id = Math.floor(note.index / 10) - 1;
        if(slide_id == 0 || slide_id == 1){
          if(last_note[slide_id] == null){
            last_note[slide_id] = note;
          }
          else{
            let context_y = getContextY(note.pulse);
            let c = context_y.c;
            let x = box_x + (div_x * (note.lane + 2) / 2);
            let y = context_y.y;

            let last_x = box_x + (div_x * (last_note[slide_id].lane + 2) / 2);
            let last_y = getContextY(last_note[slide_id].pulse).y;
            last_note[slide_id] = (note.index % 10 == 7 ? note : null);

            c.beginPath();
            c.moveTo(last_x, last_y);
            c.lineTo(x, y);
            c.stroke();
            if(note.index % 10 == 7){
              c.beginPath();
              c.arc(x, y, c.lineWidth / 2, 0, Math.PI * 2, false);
              c.fill();
            }
          }
        }
      }
      for(let i = 0; i < 2; ++i){
        context[i].lineWidth = 2;
      }
      for(let note of notes){
        let context_y = getContextY(note.pulse);
        let c = context_y.c;
        let x = box_x + (div_x * (note.lane + 2) / 2);
        let y = context_y.y;

        c.beginPath();
        if(note.index % 10 == 0){}
        else if(note.index % 10 == 1){
          c.strokeStyle = 'rgb(250, 250, 250)';
          c.fillStyle = 'rgb(240, 20, 20)';
          c.arc(x, y, small_r - 2, 0, Math.PI * 2, false);
          c.fill();
          c.stroke();
          c.beginPath();
          c.strokeStyle = 'rgb(30, 30, 30)';
          c.arc(x, y, small_r, 0, Math.PI * 2, false);
          c.stroke();
        }
        else if(note.index % 10 == 2){
          c.strokeStyle = 'rgb(250, 250, 250)';
          c.fillStyle = 'rgb(240, 20, 20)';
          c.arc(x, y, large_r - 2, 0, Math.PI * 2, false);
          c.fill();
          c.stroke();
          c.beginPath();
          c.strokeStyle = 'rgb(30, 30, 30)';
          c.arc(x, y, large_r, 0, Math.PI * 2, false);
          c.stroke();
        }
        else if(note.index % 10 == 3){
          c.strokeStyle = 'rgb(30, 30, 30)';
          c.fillStyle = 'rgb(250, 250, 250)';
          c.moveTo(x + small_r / sqrt2, y - small_r / sqrt2);
          c.lineTo(x, y - 2 * small_r / sqrt2);
          c.lineTo(x - small_r / sqrt2, y - small_r / sqrt2);
          c.fill();
          c.stroke();
          c.beginPath();
          c.strokeStyle = 'rgb(250, 250, 250)';
          c.fillStyle = 'rgb(0, 170, 0)';
          c.arc(x, y, small_r - 2, 0, Math.PI * 2, false);
          c.fill();
          c.stroke();
          c.beginPath();
          c.strokeStyle = 'rgb(30, 30, 30)';
          c.arc(x, y, small_r, Math.PI * 5 / 4, Math.PI * 7 / 4, true);
          c.stroke();
          c.beginPath();
          c.strokeStyle = 'rgb(250, 250, 250)';
          c.moveTo(x, y + arrow_r);
          c.lineTo(x, y - arrow_r);
          c.lineTo(x - arrow_r, y);
          c.moveTo(x, y - arrow_r);
          c.lineTo(x + arrow_r, y);
          c.stroke();
        }
        else if(note.index % 10 == 4){
          c.strokeStyle = 'rgb(30, 30, 30)';
          c.fillStyle = 'rgb(250, 250, 250)';
          c.moveTo(x - small_r / sqrt2, y - small_r / sqrt2);
          c.lineTo(x - 2 * small_r / sqrt2, y);
          c.lineTo(x - small_r / sqrt2, y + small_r / sqrt2);
          c.fill();
          c.stroke();
          c.beginPath();
          c.strokeStyle = 'rgb(250, 250, 250)';
          c.fillStyle = 'rgb(20, 20, 240)';
          c.arc(x, y, small_r - 2, 0, Math.PI * 2, false);
          c.fill();
          c.stroke();
          c.beginPath();
          c.strokeStyle = 'rgb(30, 30, 30)';
          c.arc(x, y, small_r, Math.PI * 3 / 4, Math.PI * 5 / 4, true);
          c.stroke();
          c.beginPath();
          c.strokeStyle = 'rgb(250, 250, 250)';
          c.moveTo(x + arrow_r, y);
          c.lineTo(x - arrow_r, y);
          c.lineTo(x, y - arrow_r);
          c.moveTo(x - arrow_r, y);
          c.lineTo(x, y + arrow_r);
          c.stroke();
        }
        else if(note.index % 10 == 5){
          c.strokeStyle = 'rgb(30, 30, 30)';
          c.fillStyle = 'rgb(250, 250, 250)';
          c.moveTo(x + small_r / sqrt2, y - small_r / sqrt2);
          c.lineTo(x + 2 * small_r / sqrt2, y);
          c.lineTo(x + small_r / sqrt2, y + small_r / sqrt2);
          c.fill();
          c.stroke();
          c.beginPath();
          c.strokeStyle = 'rgb(250, 250, 250)';
          c.fillStyle = 'rgb(225, 225, 0)';
          c.arc(x, y, small_r - 2, 0, Math.PI * 2, false);
          c.fill();
          c.stroke();
          c.beginPath();
          c.strokeStyle = 'rgb(30, 30, 30)';
          c.arc(x, y, small_r, Math.PI * 1 / 4, Math.PI * 7 / 4, false);
          c.stroke();
          c.beginPath();
          c.strokeStyle = 'rgb(250, 250, 250)';
          c.moveTo(x - arrow_r, y);
          c.lineTo(x + arrow_r, y);
          c.lineTo(x, y - arrow_r);
          c.moveTo(x + arrow_r, y);
          c.lineTo(x, y + arrow_r);
          c.stroke();
        }
        else if(note.index == 36){
          c.strokeStyle = 'rgb(250, 250, 250)';
          c.fillStyle = 'rgb(240, 20, 20)';
          c.arc(x, y, extralarge_r - 2, 0, Math.PI * 2, false);
          c.fill();
          c.stroke();
          c.beginPath();
          c.strokeStyle = 'rgb(30, 30, 30)';
          c.arc(x, y, extralarge_r, 0, Math.PI * 2, false);
          c.stroke();
        }
      }
    }
  })();
</script>
